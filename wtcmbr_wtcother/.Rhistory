genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtambr_wtcmbr")
sigOnly <- read.csv("wtambr_wtcmbr_DE1_sigonly.csv") #change this
sigOnly <- read.csv("wtambr_wtcmbr_DE1.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
head(allITAGmerge)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtambr_wtbmbr")
sigOnly <- read.csv("wtbmbr_wtbother_DE1.attempt2.csv") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtambr_wtbmbr")
sigOnly <- read.csv("wtambr_wtbmbr_DE1.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtbmbr_wtbother")
sigOnly <- read.csv("wtbmbr_wtbother_DE1.attempt2.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
```
###Subset
First I need to subset the list to up or down regulated, then add a new colum that specififys 1.  This column is need to for merging.
```{r}
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
```
First merge each table to geneLength
```{r}
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
```
head(allITAGmerge)
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
```
This is if you want to write out the table.
#write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
Ashishes section
--------------------------------------------------------------------------------------------
The is the input of the GOslim categories.  There are only two columns 1. itag and 2. go
```{r}
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtbmbr_wtcmbr")
sigOnly <- read.csv("wtbmbr_wtcmbr_DE1.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
```
###Subset
First I need to subset the list to up or down regulated, then add a new colum that specififys 1.  This column is need to for merging.
```{r}
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
```
First merge each table to geneLength
```{r}
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
```
head(allITAGmerge)
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
```
This is if you want to write out the table.
#write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
Ashishes section
--------------------------------------------------------------------------------------------
The is the input of the GOslim categories.  There are only two columns 1. itag and 2. go
```{r}
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
setwd("~/Desktop/GO_enrichment_AashishWay/wtcmbr_wtcother")
sigOnly <- read.csv("wtcmbr_wtcother_DE.csv") #change this
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
```
###Subset
First I need to subset the list to up or down regulated, then add a new colum that specififys 1.  This column is need to for merging.
```{r}
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
```
First merge each table to geneLength
```{r}
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
```
head(allITAGmerge)
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
# reorder the columns
matrixGO <- matrixGO[,c(1,5,4,2,3)] #they have to be in this order for some reason.
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
dim(matrixGO)
```
This is if you want to write out the table.
#write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
Ashishes section
--------------------------------------------------------------------------------------------
The is the input of the GOslim categories.  There are only two columns 1. itag and 2. go
```{r}
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$up) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_up_GOmerge.txt") #change this
genes = as.integer(pat$down) #change this
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
write.table(t, file="DE1_sigonly_down_GOmerge.txt") #change this
